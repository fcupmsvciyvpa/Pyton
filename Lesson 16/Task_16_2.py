# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2

# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ß–µ—Ä–µ–ø–∞—à–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ x –∏ y —á–µ—Ä–µ–ø–∞—à–∫–∏, –∞ —Ç–∞–∫–∂–µ s - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ—á–µ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –∑–∞ —Ö–æ–¥

# —É —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å –µ—Å—Ç—å –º–µ—Ç–æ–¥—ã:

# go_up() - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç y –Ω–∞ s
# go_down() - —É–º–µ–Ω—å—à–∞–µ—Ç y –Ω–∞ s
# go_left() - —É–º–µ–Ω—å—à–∞–µ—Ç x –Ω–∞ s
# go_right() - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç y –Ω–∞ s
# evolve() - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç s –Ω–∞ 1
# degrade() - —É–º–µ–Ω—å—à–∞–µ—Ç s –Ω–∞ 1 –∏–ª–∏ –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –∫–æ–≥–¥–∞ s –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å ‚â§ 0
# count_moves(x2, y2) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —á–µ—Ä–µ–ø–∞—à–∫–∞ —Å–º–æ–∂–µ—Ç –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ x2 y2 –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏

from collections import deque


class turtle(object):

    def __init__(self, x, y, s):

        self.x = x
        self.y = y
        self.s = s

    def go_up(self):
        self.y += self.s
        print(f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–ø–∞—à–∫–∏: ({self.x}, {self.y}), —Å–∫–æ—Ä–æ—Å—Ç—å: {self.s}")
    def go_down(self):
        self.y -= self.s
        print(f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–ø–∞—à–∫–∏: ({self.x}, {self.y}), —Å–∫–æ—Ä–æ—Å—Ç—å: {self.s}")    
    def go_left(self):
        self.x -= self.s
        print(f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–ø–∞—à–∫–∏: ({self.x}, {self.y}), —Å–∫–æ—Ä–æ—Å—Ç—å: {self.s}")    
    def go_right(self):
        self.x += self.s
        print(f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–ø–∞—à–∫–∏: ({self.x}, {self.y}), —Å–∫–æ—Ä–æ—Å—Ç—å: {self.s}")    
    def evolve(self):
        self.s += 1
        print(f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–ø–∞—à–∫–∏: ({self.x}, {self.y}), —Å–∫–æ—Ä–æ—Å—Ç—å: {self.s}")    
    def degrade(self):
        self.s -= 1
        print(f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–ø–∞—à–∫–∏: ({self.x}, {self.y}), —Å–∫–æ—Ä–æ—Å—Ç—å: {self.s}")    



    def count_moves(self, x2, y2):
        start_position = (self.x, self.y, self.s)
        queue = deque([(start_position, [], 0)])  # –ö–æ—Ä—Ç–µ–∂: (–ø–æ–∑–∏—Ü–∏—è, –ø—É—Ç—å, —à–∞–≥–∏)
        visited = set()

        while queue:
            (current_x, current_y, current_s), path, steps = queue.popleft()
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if current_x == x2 and current_y == y2:
                return len(path), path
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑/–≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ)
            possible_moves = [
                ('up', current_x, current_y + current_s, current_s),
                ('down', current_x, current_y - current_s, current_s),
                ('left', current_x - current_s, current_y, current_s),
                ('right', current_x + current_s, current_y, current_s)
            ]
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
            possible_changes = [
                ('evolve', current_x, current_y, current_s + 1),
                ('degrade', current_x, current_y, current_s - 1) if current_s > 1 else None
            ]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º None –≤ –ø—É—Å—Ç–æ—Ç—É
            possible_changes = list(filter(None, possible_changes))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
            possible_states = possible_moves + possible_changes
            
            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            for action, new_x, new_y, new_s in possible_states:
                new_state = (new_x, new_y, new_s)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Ç–∞–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–Ω–µ–µ
                if new_state not in visited:
                    visited.add(new_state)
                    queue.append((new_state, path + [action], steps + 1))



The_turtle = turtle(-1, 2, 2)

command = ""

while command != "stop":
        command = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è üê¢ (–ù–∞–ø–∏—à–∏—Ç–µ stop –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ").lower()
        if command == "go_up":
            The_turtle.go_up()
        elif command == "go_down":
            The_turtle.go_down()
        elif command == "go_left":
            The_turtle.go_left()
        elif command == "go_right":
            The_turtle.go_right() 
        elif command == "evolve":
            The_turtle.evolve()
        elif command == "degrade":
            The_turtle.degrade()
        elif command == "count_moves":
            X = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X: "))
            Y = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y: "))
            steps_count, moves_sequence = The_turtle.count_moves(X, Y)
            
            print(f"–ú–∏–Ω. –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤: {steps_count}")
            print("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π:")
            for i, move in enumerate(moves_sequence):
                print(f"{i+1}. {move.capitalize()}")  

        elif command == "stop" or command == "":
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

